#!/usr/bin/env node
"use strict";

var fs = require('fs');
var assert = require('assert');
var uglifyjs = require('uglify-js');
var cheerio = require('cheerio');

var devMode = ~process.argv.indexOf('--dev');

// minify HTML and inline CSS.
var $ = cheerio.load(read('web/index.html'), devMode?{}:{ignoreWhitespace:true});
$('style').each(function (i,elem) {
  assert(elem.children && elem.children[0] && elem.children[0].type == 'text');
  elem.children[0].data = minCSS(elem.children[0].data);
});

// minify the loader and insert at the end of the document.
var loader = minify(wrap(read('web/loader.js')));
$('body').append('<script>'+loader+'</script>');

// write the static web files.
fs.writeFileSync('out/index.html', $.html(), 'utf8');

// copy the logo image.
copy('out/esme.png', 'web/esme.png');

// read and minify shaders.
var shaders = 'var ShaderLibrary='+JSON.stringify({
  vertex:   norm_ws(read('src/shader.vertex', 'utf8')),
  fragment: norm_ws(read('src/shader.fragment', 'utf8')),
})+';\n';

// write the game-server data files.
write('gen/game.js', minify(wrap(
  shaders +
  untrace(concat([
    'src/raf-shim.js',
    'src/defs.js',
    'src/cache.js',
    'src/controls.js',
    'src/engine.js',
    'src/geom.js',
    'src/glr.js',
    'src/start.js'
  ]))
)));


function minify(text) {
  if (devMode) return text;
  return uglifyjs.minify(text, {fromString:true}).code; // TODO: outSourceMap
}

function untrace(text) {
  if (devMode) return text;
  return text.replace(/\btrace\([^\)]+\);/g,';');
}

function concat(files) { return files.map(read).join('\n;'); }
function read(from) { return fs.readFileSync(from, 'utf8'); }
function write(to, text) { fs.writeFileSync(to, text, 'utf8'); }
function copy(to, from) { fs.writeFileSync(to, fs.readFileSync(from)); }
function norm_ws(text) { return text.replace(/[ \t]+/g,' ').replace(/\n\s*/g,'\n'); }
function wrap(text) { return '(function(){\n' + text + '\n})()'; }

function minCSS(css) {
  return css.replace(/\s+{/g, '{')
            .replace(/{\s+/g, '{')
            .replace(/\s+}/g, '}')
            .replace(/}\s+/g, '}')
            .replace(/:\s+/g, ':')
            .replace(/;\s+/g, ';')
            .replace(/,\s+/g, ',')
            .replace(/;}/g, '}');
}
